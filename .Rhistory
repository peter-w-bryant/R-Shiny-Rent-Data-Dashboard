actionButton("clear_selection_button", "Clear Selection")
),
fluidRow(
column(width = 8,
plotOutput("us_map", click = "plot_click", width = "100%", height = "550px")
),
column(width = 4,
div(
style = "text-align: center;",
conditionalPanel(condition = "input.map_var == 'Median Days on the Market' && $('#selected_state_header').text() !== 'Please click on a state.'", plotOutput("median_days_plot", width = "100%", height = "300px")), #  && !is.null(selected_state$state)
conditionalPanel(condition = "input.map_var == 'Median Home Prices'", plotOutput("median_price_plot", width = "100%", height = "300px")),
)
)
),
fluidRow(
plotlyOutput("state_bar_plot", height = "1000px", width = "90%")
)
),
# California Analysis Tab+Page
tabPanel(
"County Analysis",
mainPanel(
tags$h2("U.S. County",
tags$span("Rental Property Analysis", style = "color: #BF050C; font-weight: bold;")
),
p(county_analysis_pg),
uiOutput("selected_state_county_header"),
fluidRow(
column(
width = 3,
selectInput("bedrooms", "Select number of bedrooms:",
choices = c("0BR", "1BR", "2BR", "3BR", "4BR"),
selected = "1BR")
),
column(
width = 3,
selectInput("state_optional_select", "Select a state (Optional):",
choices = c("All", available_states),
selected = "All")
)
),
fluidRow(
splitLayout(cellWidths = c(1050,6e2), leafletOutput("us_county_map", width="1000px", height = "700px"),
conditionalPanel(condition = "$('#selected_state_county_header').text() !== 'Showing All U.S. Counties'", plotlyOutput("bedrooms_line_plot", width = "100%", height = "700px"))),
),
),
),
# Link to Code + Links to Data
tabPanel(
"Code/Sources",
mainPanel(
),
)
)
server <- function(input, output, session) {
# U.S. ANALYSIS
# reactive expression initializing weighted sum of all features per state data
weighted_sum_data <- reactive({ compute_weighted_sum(input$education_spending_weight, input$citizens_per_hospital_weight, input$median_home_prices_weight, input$median_listing_days_weight)})
# look up table that maps input values to data sets and column names
data_lookup <- list(
"Education Spending" = list(data = education_spending_ppcs, var = "PPCS", join_data = education_spending_ppcs, legend = "PPCS (Thousands)"),
"# Citizens Per Hospital" = list(data = hospitals, var = "People Per Hospital", join_data = hospitals, legend = "# of Citizens (Thousands"),
"Median Home Prices" = list(data = realty_data, var = "median_listing_price", join_data = median_listing_price, legend = "Median Home Prices (Thousands)"),
"Median Days on the Market" = list(data = realty_data, var = "median_days_on_market", join_data = median_listing_days, legend = "Median Days on the Market"))
# update the data_lookup list
data_lookup[["Weighted Sum"]] <- list(data = NULL, var = "weighted_sum", join_data = weighted_sum_data)
# reactive value to store the selected (clicked) state and its data
selected_state <- reactiveValues(state = NULL, data = NULL)
# observe event sets the selected state to NULL when the variable select input is changed
observeEvent(input$map_var, {
selected_state$state <- NULL
selected_state$data <- NULL
})
# observe event sets the selected state to NULL when the "Clear Selection" button is pressed
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
selected_state$data <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# observe event that sets the  selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
if (!is.null(selected_state$state)) {
data_info <- data_lookup[[input$map_var]]
data_info$join_data %>%
filter(State == selected_state$state) %>%
select(data_info$var) %>%
pull() %>%
as.character() -> selected_state$data
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state), br())
} else {
tags$h4("Please click on a state.")
}
})
# renderPlot context to render the map plot for each select input variable using the look up table
output$us_map <- renderPlot({
if (input$map_var == "Weighted Sum") {
weighted_data <- weighted_sum_data()
join_data <- map_data("state", exact = FALSE) %>%
left_join(weighted_data, by = c("region" = "State")) %>%
mutate(fill_color = total_normalized_weight, region = tolower(region))
create_map_plot(join_data, "fill_color", "Weighted Sum (Normalized)", FALSE)
} else {
data_info <- data_lookup[[input$map_var]]
map_data <- map_data("state", exact = FALSE) %>%
left_join(data_info$join_data, by = c("region" = "State"))
if (input$map_var %in% c("Education Spending", "# Citizens Per Hospital", "Median Home Prices")) {
map_data = map_data %>% mutate(fill_color = !!sym(data_info$var) / 1e3, region = tolower(region))
create_map_plot(map_data, "fill_color", data_info$legend, TRUE)
} else {
map_data = map_data %>% mutate(fill_color = !!sym(data_info$var), region = tolower(region))
create_map_plot(map_data, "fill_color", data_info$legend, TRUE)
}
}
}, bg="transparent")
# renderPlot context to render "Median House Prices Over Time" time series plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
} else {
NULL
}
})
# renderPlotly context to render the state bar plot
output$state_bar_plot <- renderPlotly({
if (input$map_var != "Weighted Sum") {
data_info <- data_lookup[[input$map_var]]
data <- data_info$join_data %>%
select(State, !!sym(data_info$var)) %>%
arrange(desc(!!sym(data_info$var))) %>% # Sort data in descending order
mutate(State = fct_reorder(State, !!sym(data_info$var), .desc = TRUE)) %>%  # Reorder states in descending order
mutate(State = str_to_title(State))
create_bar_plot(data, data_info$var, input$map_var)
} else {
NULL
}
})
# renderPlot context to render "Median Days on the Market" seasonal plot
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State))
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# renderUI context for the "Select a variable" selectInput
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market", "Weighted Sum"))
})
# renderText context to display selected state data
output$selected_state_data <- renderText({
if (!is.null(selected_state$data)) {
data_info <- data_lookup[[input$map_var]]
column_name <- data_info$var
pretty_value <- prettyNum(round(as.integer(selected_state$data)), big.mark = ",")
if (column_name == "PPCS") {
pretty_column_name <- column_name
} else {
pretty_column_name <- gsub("_", " ", column_name)
pretty_column_name <- str_to_title(pretty_column_name)
}
paste(pretty_column_name, ": ", pretty_value, "*")
}
})
output$description <- renderText({
if (input$map_var == "Median Home Prices") {
"*The median listing price within the specified geography during the specified month."
} else if (input$map_var == "Median Days on the Market") {
"*The median number of days property listings spend on the market within the specified geography during the specified month. Time spent on the market is defined as the time between the initial listing of a property and either its closing date or the date it is taken off the market."
} else if (input$map_var == "Weighted Sum") {
"*The weighted sum of Education Spending, # Citizens Per Hospital, Median Home Prices, and Median Days on the Market, where the weights can be adjusted using the sliders."
}else if(input$map_var == "Education Spending"){
"*The total expenditure on education by state governments within the specified geography during the specified time period."
}else if(input$map_var == "# Citizens Per Hospital"){
"*The average number of citizens per hospital in the specified state."
}
})
# U.S. County ANALYSIS
output$us_county_map <- renderLeaflet({state_leaflet_plot(input$bedrooms, input$state_optional_select)})
selected_county <- reactiveVal()
observeEvent(input$us_county_map_shape_click, {click_data <- input$us_county_map_shape_click
selected_county(click_data$id)
})
selected_county_info <- reactive({
if (!is.null(selected_county())) {
county_info <- us_counties_2021[us_counties_2021$OBJECTID == selected_county(), c("COUNTY_NAME", "STATE_NAME")]
return(county_info)
}
})
output$county_info <- renderDT({
if (is.null(selected_county())) {
return(NULL)
}
county_data <- us_counties_all[us_counties_all$OBJECTID == selected_county(), ] %>%
dplyr::select(-OBJECTID, -geometry, -STATE, -COUNTY) %>%
arrange(desc(Year)) %>%
select(-STATE_NAME, -COUNTY_NAME)
datatable(county_data, rownames = FALSE)
})
output$bedrooms_line_plot <- renderPlotly({
if (!is.null(selected_county())) {
create_bedrooms_line_plot(selected_county_info(), input$bedrooms)
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_county_header <- renderUI({
if (!is.null(selected_county())) {
tags$h3(paste(selected_county_info()[1], selected_county_info()[2], sep = ", "), br())
} else {
tags$h4("Showing All U.S. Counties")
}
})
}
shinyApp(ui = ui, server = server)
ui <- navbarPage(
theme = shinytheme("slate"),
title = "BREG",
# U.S. Analysis (Main Visualization) Tab+Page
tabPanel(
"State Analysis",
mainPanel(
tags$h2("Badger Real Estate Group",
tags$span("Investment Dashboard", style = "color: #BF050C; font-weight: bold;")
),
p(us_analysis_pg),
uiOutput("selected_state_header"), # Display selected state in header
textOutput("selected_state_data"), # Display selected state data
br(),
uiOutput("map_var_input"),
# conditional weighted sum sliders
conditionalPanel(
condition = "input.map_var == 'Weighted Sum'",
fluidRow(
column(
width = 12,
div(style = "display:inline-block; width:22%; margin-right:2%",
sliderInput("education_spending_weight", "Education Spending Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
),
div(style = "display:inline-block; width:22%; margin-right:2%",
sliderInput("citizens_per_hospital_weight", "# Citizens Per Hospital Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
),
div(style = "display:inline-block; width:22%; margin-right:2%",
sliderInput("median_home_prices_weight", "Median Home Prices Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
),
div(style = "display:inline-block; width:22%;",
sliderInput("median_listing_days_weight", "Median Listing Days Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
)
)
)
),
textOutput("description"),
br(),
actionButton("clear_selection_button", "Clear Selection")
),
fluidRow(
column(width = 8,
plotOutput("us_map", click = "plot_click", width = "100%", height = "550px")
),
column(width = 4,
div(
style = "text-align: center;",
conditionalPanel(condition = "input.map_var == 'Median Days on the Market' && $('#selected_state_header').text() !== 'Please click on a state.'", plotOutput("median_days_plot", width = "100%", height = "300px")), #  && !is.null(selected_state$state)
conditionalPanel(condition = "input.map_var == 'Median Home Prices'", plotOutput("median_price_plot", width = "100%", height = "300px")),
)
)
),
fluidRow(
plotlyOutput("state_bar_plot", height = "1000px", width = "90%")
)
),
# California Analysis Tab+Page
tabPanel(
"County Analysis",
mainPanel(
tags$h2("U.S. County",
tags$span("Rental Property Analysis", style = "color: #BF050C; font-weight: bold;")
),
p(county_analysis_pg),
uiOutput("selected_state_county_header"),
fluidRow(
column(
width = 3,
selectInput("bedrooms", "Select number of bedrooms:",
choices = c("0BR", "1BR", "2BR", "3BR", "4BR"),
selected = "1BR")
),
column(
width = 3,
selectInput("state_optional_select", "Select a state (Optional):",
choices = c("All", available_states),
selected = "All")
)
),
fluidRow(
splitLayout(cellWidths = c(1050,6e2), leafletOutput("us_county_map", width="1000px", height = "700px"),
conditionalPanel(condition = "$('#selected_state_county_header').text() !== 'Showing All U.S. Counties'", plotlyOutput("bedrooms_line_plot", width = "100%", height = "700px"))),
),
),
),
# Link to Code + Links to Data
tabPanel(
"Code/Sources",
mainPanel(
),
)
)
server <- function(input, output, session) {
# U.S. ANALYSIS
# reactive expression initializing weighted sum of all features per state data
weighted_sum_data <- reactive({ compute_weighted_sum(input$education_spending_weight, input$citizens_per_hospital_weight, input$median_home_prices_weight, input$median_listing_days_weight)})
# look up table that maps input values to data sets and column names
data_lookup <- list(
"Education Spending" = list(data = education_spending_ppcs, var = "PPCS", join_data = education_spending_ppcs, legend = "PPCS (Thousands)"),
"# Citizens Per Hospital" = list(data = hospitals, var = "People Per Hospital", join_data = hospitals, legend = "# of Citizens (Thousands"),
"Median Home Prices" = list(data = realty_data, var = "median_listing_price", join_data = median_listing_price, legend = "Median Home Prices (Thousands)"),
"Median Days on the Market" = list(data = realty_data, var = "median_days_on_market", join_data = median_listing_days, legend = "Median Days on the Market"))
# update the data_lookup list
data_lookup[["Weighted Sum"]] <- list(data = NULL, var = "weighted_sum", join_data = weighted_sum_data)
# reactive value to store the selected (clicked) state and its data
selected_state <- reactiveValues(state = NULL, data = NULL)
# observe event sets the selected state to NULL when the variable select input is changed
observeEvent(input$map_var, {
selected_state$state <- NULL
selected_state$data <- NULL
})
# observe event sets the selected state to NULL when the "Clear Selection" button is pressed
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
selected_state$data <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# observe event that sets the  selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
if (!is.null(selected_state$state)) {
data_info <- data_lookup[[input$map_var]]
data_info$join_data %>%
filter(State == selected_state$state) %>%
select(data_info$var) %>%
pull() %>%
as.character() -> selected_state$data
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state), br())
} else {
tags$h4("Please click on a state.")
}
})
# renderPlot context to render the map plot for each select input variable using the look up table
output$us_map <- renderPlot({
if (input$map_var == "Weighted Sum") {
weighted_data <- weighted_sum_data()
join_data <- map_data("state", exact = FALSE) %>%
left_join(weighted_data, by = c("region" = "State")) %>%
mutate(fill_color = total_normalized_weight, region = tolower(region))
create_map_plot(join_data, "fill_color", "Weighted Sum (Normalized)", FALSE)
} else {
data_info <- data_lookup[[input$map_var]]
map_data <- map_data("state", exact = FALSE) %>%
left_join(data_info$join_data, by = c("region" = "State"))
if (input$map_var %in% c("Education Spending", "# Citizens Per Hospital", "Median Home Prices")) {
map_data = map_data %>% mutate(fill_color = !!sym(data_info$var) / 1e3, region = tolower(region))
create_map_plot(map_data, "fill_color", data_info$legend, TRUE)
} else {
map_data = map_data %>% mutate(fill_color = !!sym(data_info$var), region = tolower(region))
create_map_plot(map_data, "fill_color", data_info$legend, TRUE)
}
}
}, bg="transparent")
# renderPlot context to render "Median House Prices Over Time" time series plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
} else {
NULL
}
})
# renderPlotly context to render the state bar plot
output$state_bar_plot <- renderPlotly({
if (input$map_var != "Weighted Sum") {
data_info <- data_lookup[[input$map_var]]
data <- data_info$join_data %>%
select(State, !!sym(data_info$var)) %>%
arrange(desc(!!sym(data_info$var))) %>% # Sort data in descending order
mutate(State = fct_reorder(State, !!sym(data_info$var), .desc = TRUE)) %>%  # Reorder states in descending order
mutate(State = str_to_title(State))
create_bar_plot(data, data_info$var, input$map_var)
} else {
NULL
}
})
# renderPlot context to render "Median Days on the Market" seasonal plot
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State))
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# renderUI context for the "Select a variable" selectInput
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market", "Weighted Sum"))
})
# renderText context to display selected state data
output$selected_state_data <- renderText({
if (!is.null(selected_state$data)) {
data_info <- data_lookup[[input$map_var]]
column_name <- data_info$var
pretty_value <- prettyNum(round(as.integer(selected_state$data)), big.mark = ",")
if (column_name == "PPCS") {
pretty_column_name <- column_name
} else {
pretty_column_name <- gsub("_", " ", column_name)
pretty_column_name <- str_to_title(pretty_column_name)
}
paste(pretty_column_name, ": ", pretty_value, "*")
}
})
output$description <- renderText({
if (input$map_var == "Median Home Prices") {
"*The median listing price within the specified geography during the specified month."
} else if (input$map_var == "Median Days on the Market") {
"*The median number of days property listings spend on the market within the specified geography during the specified month. Time spent on the market is defined as the time between the initial listing of a property and either its closing date or the date it is taken off the market."
} else if (input$map_var == "Weighted Sum") {
"*The weighted sum of Education Spending, # Citizens Per Hospital, Median Home Prices, and Median Days on the Market, where the weights can be adjusted using the sliders."
}else if(input$map_var == "Education Spending"){
"*The total expenditure on education by state governments within the specified geography during the specified time period."
}else if(input$map_var == "# Citizens Per Hospital"){
"*The average number of citizens per hospital in the specified state."
}
})
# U.S. County ANALYSIS
output$us_county_map <- renderLeaflet({state_leaflet_plot(input$bedrooms, input$state_optional_select)})
selected_county <- reactiveVal()
observeEvent(input$us_county_map_shape_click, {click_data <- input$us_county_map_shape_click
selected_county(click_data$id)
})
selected_county_info <- reactive({
if (!is.null(selected_county())) {
county_info <- us_counties_2021[us_counties_2021$OBJECTID == selected_county(), c("COUNTY_NAME", "STATE_NAME")]
return(county_info)
}
})
output$county_info <- renderDT({
if (is.null(selected_county())) {
return(NULL)
}
county_data <- us_counties_all[us_counties_all$OBJECTID == selected_county(), ] %>%
dplyr::select(-OBJECTID, -geometry, -STATE, -COUNTY) %>%
arrange(desc(Year)) %>%
select(-STATE_NAME, -COUNTY_NAME)
datatable(county_data, rownames = FALSE)
})
output$bedrooms_line_plot <- renderPlotly({
if (!is.null(selected_county())) {
create_bedrooms_line_plot(selected_county_info(), input$bedrooms)
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_county_header <- renderUI({
if (!is.null(selected_county())) {
tags$h3(paste(selected_county_info()[1], selected_county_info()[2], sep = ", "), br())
} else {
tags$h4("Showing All U.S. Counties")
}
})
}
shinyApp(ui = ui, server = server)
