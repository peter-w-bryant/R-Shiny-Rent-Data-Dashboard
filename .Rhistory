ggplot(aes(x = long, y = lat, group = group, fill = fill_color)) +
geom_polygon(color = "white") +
scale_fill_gradientn(
colors = c("darkred", "red", "orange", "yellow", "green", "darkgreen"),
guide = guide_colorbar(
title = "Total (millions)",
ticks = FALSE,
barwidth = 10
)
) +
coord_quickmap() +
theme_void()
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
print(state_name)
selected_state$state <- state_name
})
# Display selected state in sidebar with uppercase first letter
output$selected_state <- renderPrint({
if (!is.null(selected_state$state)) {
paste0("Selected state: ", str_to_title(selected_state$state))
} else {
"Please click on a state."
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
education_spending %>% filter(State == selected_state$state)
} else {
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Revenue/Spending"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
tags$h1("Click on a US state"),
sidebarLayout(
sidebarPanel(
h5("Instructions"),
p("Click on a state to select it as input."),
hr(),
verbatimTextOutput("selected_state"),
uiOutput("map_var_input"),
fluidRow(dataTableOutput("state_data")) # New line to render table under sidebar)
),
mainPanel(
plotOutput("us_map", click = "plot_click", width = "800px", height = "700px")
)
)
)
# Define server
server <- function(input, output, session) {
# Create US map
output$us_map <- renderPlot({
# If the "Education Revenue/Spending" option is selected, color the states based on the Total column
if (input$map_var == "Education Revenue/Spending") {
map_data <- map_data("state", exact = FALSE) %>%
#mutate(region = gsub(":main", "", region)) %>% # remove ":main" from state names
left_join(education_spending, by = c("region" = "State")) %>%
mutate(fill_color = Total)
par(mar = c(2, 2, 2, 2))
map_data %>%
ggplot(aes(x = long, y = lat, group = group, fill = fill_color)) +
geom_polygon(color = "white") +
scale_fill_gradientn(
colors = c("darkred", "red", "orange", "yellow", "green", "darkgreen"),
guide = guide_colorbar(
title = "Total (millions)",
ticks = FALSE,
barwidth = 5,
label = label_number_si(scale = 1e-6, accuracy = 0.1)
)
) +
coord_quickmap() +
theme_void()
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
print(state_name)
selected_state$state <- state_name
})
# Display selected state in sidebar with uppercase first letter
output$selected_state <- renderPrint({
if (!is.null(selected_state$state)) {
paste0("Selected state: ", str_to_title(selected_state$state))
} else {
"Please click on a state."
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
education_spending %>% filter(State == selected_state$state)
} else {
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Revenue/Spending"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
tags$h1("Click on a US state"),
sidebarLayout(
sidebarPanel(
h5("Instructions"),
p("Click on a state to select it as input."),
hr(),
verbatimTextOutput("selected_state"),
uiOutput("map_var_input"),
fluidRow(dataTableOutput("state_data")) # New line to render table under sidebar)
),
mainPanel(
plotOutput("us_map", click = "plot_click", width = "800px", height = "700px")
)
)
)
# Define server
server <- function(input, output, session) {
# Create US map
output$us_map <- renderPlot({
# If the "Education Revenue/Spending" option is selected, color the states based on the Total column
if (input$map_var == "Education Revenue/Spending") {
map_data <- map_data("state", exact = FALSE) %>%
#mutate(region = gsub(":main", "", region)) %>% # remove ":main" from state names
left_join(education_spending, by = c("region" = "State")) %>%
mutate(fill_color = Total)
par(mar = c(2, 2, 2, 2))
map_data %>%
ggplot(aes(x = long, y = lat, group = group, fill = fill_color)) +
geom_polygon(color = "white") +
scale_fill_gradientn(
colors = c("darkred", "red", "orange", "yellow", "green", "darkgreen"),
guide = guide_colorbar(
title = "Total (millions)",
ticks = FALSE,
barwidth = 5,
label = label_formatter(
prefix = "",
suffix = "M",
scale = 1e-6,
accuracy = 0.1
)
)
) +
coord_quickmap() +
theme_void()
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
print(state_name)
selected_state$state <- state_name
})
# Display selected state in sidebar with uppercase first letter
output$selected_state <- renderPrint({
if (!is.null(selected_state$state)) {
paste0("Selected state: ", str_to_title(selected_state$state))
} else {
"Please click on a state."
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
education_spending %>% filter(State == selected_state$state)
} else {
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Revenue/Spending"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
tags$h1("Click on a US state"),
sidebarLayout(
sidebarPanel(
h5("Instructions"),
p("Click on a state to select it as input."),
hr(),
verbatimTextOutput("selected_state"),
uiOutput("map_var_input"),
fluidRow(dataTableOutput("state_data")) # New line to render table under sidebar)
),
mainPanel(
plotOutput("us_map", click = "plot_click", width = "800px", height = "700px")
)
)
)
# Define server
server <- function(input, output, session) {
# Create US map
output$us_map <- renderPlot({
# If the "Education Revenue/Spending" option is selected, color the states based on the Total column
if (input$map_var == "Education Revenue/Spending") {
map_data <- map_data("state", exact = FALSE) %>%
#mutate(region = gsub(":main", "", region)) %>% # remove ":main" from state names
left_join(education_spending, by = c("region" = "State")) %>%
mutate(fill_color = Total)
par(mar = c(2, 2, 2, 2))
map_data %>%
ggplot(aes(x = long, y = lat, group = group, fill = fill_color)) +
geom_polygon(color = "white") +
scale_fill_gradientn(
colors = c("darkred", "red", "orange", "yellow", "green", "darkgreen"),
guide = guide_colorbar(
title = "Total (millions)",
ticks = FALSE,
barwidth = 5,
label = label_number_si(scale = 1e-6, accuracy = 0.1)
)
) +
coord_quickmap() +
theme_void()
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
print(state_name)
selected_state$state <- state_name
})
# Display selected state in sidebar with uppercase first letter
output$selected_state <- renderPrint({
if (!is.null(selected_state$state)) {
paste0("Selected state: ", str_to_title(selected_state$state))
} else {
"Please click on a state."
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
education_spending %>% filter(State == selected_state$state)
} else {
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Revenue/Spending"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
tags$h1("Click on a US state"),
sidebarLayout(
sidebarPanel(
h5("Instructions"),
p("Click on a state to select it as input."),
hr(),
verbatimTextOutput("selected_state"),
uiOutput("map_var_input"),
fluidRow(dataTableOutput("state_data")) # New line to render table under sidebar)
),
mainPanel(
plotOutput("us_map", click = "plot_click", width = "800px", height = "700px")
)
)
)
# Define server
server <- function(input, output, session) {
# Create US map
output$us_map <- renderPlot({
# If the "Education Revenue/Spending" option is selected, color the states based on the Total column
if (input$map_var == "Education Revenue/Spending") {
map_data <- map_data("state", exact = FALSE) %>%
#mutate(region = gsub(":main", "", region)) %>% # remove ":main" from state names
left_join(education_spending, by = c("region" = "State")) %>%
mutate(fill_color = Total)
par(mar = c(2, 2, 2, 2))
map_data %>%
ggplot(aes(x = long, y = lat, group = group, fill = fill_color)) +
geom_polygon(color = "white") +
scale_fill_gradientn(
colors = c("darkred", "red", "orange", "yellow", "green", "darkgreen"),
guide = guide_colorbar(
title = "Total (millions)",
ticks = FALSE,
barwidth = 5,
label = scales::label_number(scale = 1, suffix = "M", accuracy = 0.1)
)
) +
coord_quickmap() +
theme_void()
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
print(state_name)
selected_state$state <- state_name
})
# Display selected state in sidebar with uppercase first letter
output$selected_state <- renderPrint({
if (!is.null(selected_state$state)) {
paste0("Selected state: ", str_to_title(selected_state$state))
} else {
"Please click on a state."
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
education_spending %>% filter(State == selected_state$state)
} else {
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Revenue/Spending"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
tags$h1("Click on a US state"),
sidebarLayout(
sidebarPanel(
h5("Instructions"),
p("Click on a state to select it as input."),
hr(),
verbatimTextOutput("selected_state"),
uiOutput("map_var_input"),
fluidRow(dataTableOutput("state_data")) # New line to render table under sidebar)
),
mainPanel(
plotOutput("us_map", click = "plot_click", width = "800px", height = "700px")
)
)
)
# Define server
server <- function(input, output, session) {
# Create US map
output$us_map <- renderPlot({
# If the "Education Revenue/Spending" option is selected, color the states based on the Total column
if (input$map_var == "Education Revenue/Spending") {
map_data <- map_data("state", exact = FALSE) %>%
#mutate(region = gsub(":main", "", region)) %>% # remove ":main" from state names
left_join(education_spending, by = c("region" = "State")) %>%
mutate(fill_color = Total)
par(mar = c(2, 2, 2, 2))
map_data %>%
ggplot(aes(x = long, y = lat, group = group, fill = fill_color)) +
geom_polygon(color = "white") +
scale_fill_gradientn(
colors = c("darkred", "red", "orange", "yellow", "green", "darkgreen"),
guide = guide_colorbar(
title = "Total (millions)",
ticks = FALSE,
barwidth = 5
)
) +
coord_quickmap() +
theme_void()
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
print(state_name)
selected_state$state <- state_name
})
# Display selected state in sidebar with uppercase first letter
output$selected_state <- renderPrint({
if (!is.null(selected_state$state)) {
paste0("Selected state: ", str_to_title(selected_state$state))
} else {
"Please click on a state."
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
education_spending %>% filter(State == selected_state$state)
} else {
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Revenue/Spending"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
tags$h1("Click on a US state"),
sidebarLayout(
sidebarPanel(
h5("Instructions"),
p("Click on a state to select it as input."),
hr(),
verbatimTextOutput("selected_state"),
uiOutput("map_var_input"),
fluidRow(dataTableOutput("state_data")) # New line to render table under sidebar)
),
mainPanel(
plotOutput("us_map", click = "plot_click", width = "800px", height = "700px")
)
)
)
# Define server
server <- function(input, output, session) {
# Create US map
output$us_map <- renderPlot({
# If the "Education Revenue/Spending" option is selected, color the states based on the Total column
if (input$map_var == "Education Revenue/Spending") {
map_data <- map_data("state", exact = FALSE) %>%
#mutate(region = gsub(":main", "", region)) %>% # remove ":main" from state names
left_join(education_spending, by = c("region" = "State")) %>%
mutate(fill_color = Total / 1e6)
par(mar = c(2, 2, 2, 2))
map_data %>%
ggplot(aes(x = long, y = lat, group = group, fill = fill_color)) +
geom_polygon(color = "white") +
scale_fill_gradientn(
colors = c("darkred", "red", "orange", "yellow", "green", "darkgreen"),
guide = guide_colorbar(
title = "Total (millions)",
ticks = FALSE,
barwidth = 5
)
) +
coord_quickmap() +
theme_void()
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
print(state_name)
selected_state$state <- state_name
})
# Display selected state in sidebar with uppercase first letter
output$selected_state <- renderPrint({
if (!is.null(selected_state$state)) {
paste0("Selected state: ", str_to_title(selected_state$state))
} else {
"Please click on a state."
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
education_spending %>% filter(State == selected_state$state)
} else {
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Revenue/Spending"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
