mutate(fill_color = `People Per Hospital` / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
}
else if (input$map_var == "Median Home Prices"){
map_data <- map_data("state", exact = FALSE) %>%
# left_join(realty_data, by = c("region" = "State")) %>%
left_join(median_listing_price, by = c("region" = "State")) %>%
mutate(fill_color = median_listing_price / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
} else if (input$map_var == "Median Days on the Market"){
map_data <- map_data("state", exact = FALSE) %>%
left_join(median_listing_days, by = c("region" = "State")) %>%
mutate(fill_color = median_days_on_market)
create_map_plot(map_data, "fill_color", "Median Listing Days", TRUE)
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
})
# Display selected state in header
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state))
} else {
tags$h4("Please click on a state.")
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
if (input$map_var == "Education Spending") {
education_spending_ppcs %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(PPCS = comma(PPCS))
} else if (input$map_var == "# Citizens Per Hospital") {
hospitals %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(PPCS = comma(`People Per Hospital`))
} else if (input$map_var == "Median Home Prices"){
realty_data %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(month_date_yyyymm = format(as.Date(paste0(month_date_yyyymm, "01"), format = "%Y%m%d"), "%B %Y")) %>%
select(`month_date_yyyymm`,`median_listing_price`, `median_listing_price_per_square_foot`, `median_listing_price_mm`, `median_listing_price_yy`)
} else if (input$map_var == "Median Days on the Market"){
realty_data %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(month_date_yyyymm = format(as.Date(paste0(month_date_yyyymm, "01"), format = "%Y%m%d"), "%B %Y")) %>%
select(`month_date_yyyymm`,`median_days_on_market`, `median_days_on_market_mm`, `median_days_on_market_yy`)
}
} else {
NULL
}
})
# Median House Prices Over Time Plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
}else{
NULL
}
})
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
# filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state)
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
has_rtools()
# Define UI
ui <- fluidPage(
theme = shinytheme("slate"),
h3("Badger Real Estate Group Investment Dashboard"),
sidebarPanel(
p("This interactive visualization allows you to analyze key factors and assist you to make informed, low-risk investments. To start, click a variable of interest from the dropdown menu. The plot on the left maps your variable of interest on a US map, and if you click on a state a table will be displayed below. The median house prices and median days on the market will also display time series plots to the right."
),
uiOutput("selected_state_header"), # Display selected state in header
uiOutput("map_var_input"),
actionButton("clear_selection_button", "Clear Selection"),
),
mainPanel(
plotOutput("us_map", click = "plot_click", width = "850px", height = "750px"),
conditionalPanel(condition = "input.map_var == 'Median Days on the Market'", plotOutput("median_days_plot", width = "500px", height = "300px")),
conditionalPanel(condition = "input.map_var != 'Median Days on the Market'", plotOutput("median_price_plot", width = "500px", height = "300px")),
dataTableOutput("state_data")
)
)
# Define server
server <- function(input, output, session) {
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# TODO: Convert to: `aes_string` or `.data[[]]`, as discussed during lecture
# Create US map
output$us_map <- renderPlot({
# If the "Education Spending" option is selected, color the states based on the Total column
if (input$map_var == "Education Spending") {
map_data <- map_data("state", exact = FALSE) %>%
left_join(education_spending_ppcs, by = c("region" = "State")) %>%
mutate(fill_color = PPCS / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", FALSE)
}
else if (input$map_var == "# Citizens Per Hospital") {
map_data <- map_data("state", exact = FALSE) %>%
left_join(hospitals, by = c("region" = "State")) %>%
mutate(fill_color = `People Per Hospital` / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
}
else if (input$map_var == "Median Home Prices"){
map_data <- map_data("state", exact = FALSE) %>%
# left_join(realty_data, by = c("region" = "State")) %>%
left_join(median_listing_price, by = c("region" = "State")) %>%
mutate(fill_color = median_listing_price / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
} else if (input$map_var == "Median Days on the Market"){
map_data <- map_data("state", exact = FALSE) %>%
left_join(median_listing_days, by = c("region" = "State")) %>%
mutate(fill_color = median_days_on_market)
create_map_plot(map_data, "fill_color", "Median Listing Days", TRUE)
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
})
# Display selected state in header
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state))
} else {
tags$h4("Please click on a state.")
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
if (input$map_var == "Education Spending") {
education_spending_ppcs %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(PPCS = comma(PPCS))
} else if (input$map_var == "# Citizens Per Hospital") {
hospitals %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(PPCS = comma(`People Per Hospital`))
} else if (input$map_var == "Median Home Prices"){
realty_data %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(month_date_yyyymm = format(as.Date(paste0(month_date_yyyymm, "01"), format = "%Y%m%d"), "%B %Y")) %>%
select(`month_date_yyyymm`,`median_listing_price`, `median_listing_price_per_square_foot`, `median_listing_price_mm`, `median_listing_price_yy`)
} else if (input$map_var == "Median Days on the Market"){
realty_data %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(month_date_yyyymm = format(as.Date(paste0(month_date_yyyymm, "01"), format = "%Y%m%d"), "%B %Y")) %>%
select(`month_date_yyyymm`,`median_days_on_market`, `median_days_on_market_mm`, `median_days_on_market_yy`)
}
} else {
NULL
}
})
# Median House Prices Over Time Plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
}else{
NULL
}
})
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
# filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state)
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
theme = shinytheme("slate"),
h3("Badger Real Estate Group Investment Dashboard"),
sidebarPanel(
p("This interactive visualization allows you to analyze key factors and assist you to make informed, low-risk investments. To start, click a variable of interest from the dropdown menu. The plot on the left maps your variable of interest on a US map, and if you click on a state a table will be displayed below. The median house prices and median days on the market will also display time series plots to the right."
),
uiOutput("selected_state_header"), # Display selected state in header
uiOutput("map_var_input"),
actionButton("clear_selection_button", "Clear Selection"),
),
mainPanel(
plotOutput("us_map", click = "plot_click", width = "850px", height = "750px"),
conditionalPanel(condition = "input.map_var == 'Median Days on the Market'", plotOutput("median_days_plot", width = "500px", height = "300px")),
conditionalPanel(condition = "input.map_var != 'Median Days on the Market'", plotOutput("median_price_plot", width = "500px", height = "300px")),
dataTableOutput("state_data")
)
)
# Define server
server <- function(input, output, session) {
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# TODO: Convert to: `aes_string` or `.data[[]]`, as discussed during lecture
# Create US map
output$us_map <- renderPlot({
# If the "Education Spending" option is selected, color the states based on the Total column
if (input$map_var == "Education Spending") {
map_data <- map_data("state", exact = FALSE) %>%
left_join(education_spending_ppcs, by = c("region" = "State")) %>%
mutate(fill_color = PPCS / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", FALSE)
}
else if (input$map_var == "# Citizens Per Hospital") {
map_data <- map_data("state", exact = FALSE) %>%
left_join(hospitals, by = c("region" = "State")) %>%
mutate(fill_color = `People Per Hospital` / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
}
else if (input$map_var == "Median Home Prices"){
map_data <- map_data("state", exact = FALSE) %>%
# left_join(realty_data, by = c("region" = "State")) %>%
left_join(median_listing_price, by = c("region" = "State")) %>%
mutate(fill_color = median_listing_price / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
} else if (input$map_var == "Median Days on the Market"){
map_data <- map_data("state", exact = FALSE) %>%
left_join(median_listing_days, by = c("region" = "State")) %>%
mutate(fill_color = median_days_on_market)
create_map_plot(map_data, "fill_color", "Median Listing Days", TRUE)
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
})
# Display selected state in header
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state))
} else {
tags$h4("Please click on a state.")
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
if (input$map_var == "Education Spending") {
education_spending_ppcs %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(PPCS = comma(PPCS))
} else if (input$map_var == "# Citizens Per Hospital") {
hospitals %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(PPCS = comma(`People Per Hospital`))
} else if (input$map_var == "Median Home Prices"){
realty_data %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(month_date_yyyymm = format(as.Date(paste0(month_date_yyyymm, "01"), format = "%Y%m%d"), "%B %Y")) %>%
select(`month_date_yyyymm`,`median_listing_price`, `median_listing_price_per_square_foot`, `median_listing_price_mm`, `median_listing_price_yy`)
} else if (input$map_var == "Median Days on the Market"){
realty_data %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(month_date_yyyymm = format(as.Date(paste0(month_date_yyyymm, "01"), format = "%Y%m%d"), "%B %Y")) %>%
select(`month_date_yyyymm`,`median_days_on_market`, `median_days_on_market_mm`, `median_days_on_market_yy`)
}
} else {
NULL
}
})
# Median House Prices Over Time Plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
}else{
NULL
}
})
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
# filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state)
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
theme = shinytheme("slate"),
h3("Badger Real Estate Group Investment Dashboard"),
sidebarPanel(
p("This interactive visualization allows you to analyze key factors and assist you to make informed, low-risk investments. To start, click a variable of interest from the dropdown menu. The plot on the left maps your variable of interest on a US map, and if you click on a state a table will be displayed below. The median house prices and median days on the market will also display time series plots to the right."
),
uiOutput("selected_state_header"), # Display selected state in header
uiOutput("map_var_input"),
actionButton("clear_selection_button", "Clear Selection"),
),
mainPanel(
plotOutput("us_map", click = "plot_click", width = "850px", height = "750px"),
conditionalPanel(condition = "input.map_var == 'Median Days on the Market'", plotOutput("median_days_plot", width = "500px", height = "300px")),
conditionalPanel(condition = "input.map_var != 'Median Days on the Market'", plotOutput("median_price_plot", width = "500px", height = "300px")),
dataTableOutput("state_data")
)
)
# Define server
server <- function(input, output, session) {
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# TODO: Convert to: `aes_string` or `.data[[]]`, as discussed during lecture
# Create US map
output$us_map <- renderPlot({
# If the "Education Spending" option is selected, color the states based on the Total column
if (input$map_var == "Education Spending") {
map_data <- map_data("state", exact = FALSE) %>%
left_join(education_spending_ppcs, by = c("region" = "State")) %>%
mutate(fill_color = PPCS / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", FALSE)
}
else if (input$map_var == "# Citizens Per Hospital") {
map_data <- map_data("state", exact = FALSE) %>%
left_join(hospitals, by = c("region" = "State")) %>%
mutate(fill_color = `People Per Hospital` / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
}
else if (input$map_var == "Median Home Prices"){
map_data <- map_data("state", exact = FALSE) %>%
# left_join(realty_data, by = c("region" = "State")) %>%
left_join(median_listing_price, by = c("region" = "State")) %>%
mutate(fill_color = median_listing_price / 1e3)
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
} else if (input$map_var == "Median Days on the Market"){
map_data <- map_data("state", exact = FALSE) %>%
left_join(median_listing_days, by = c("region" = "State")) %>%
mutate(fill_color = median_days_on_market)
create_map_plot(map_data, "fill_color", "Median Listing Days", TRUE)
}
})
# Create reactive value for selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# Update selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
})
# Display selected state in header
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state))
} else {
tags$h4("Please click on a state.")
}
})
# Render education spending data table
output$state_data <- renderDataTable({
if (!is.null(selected_state$state)) {
if (input$map_var == "Education Spending") {
education_spending_ppcs %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(PPCS = comma(PPCS))
} else if (input$map_var == "# Citizens Per Hospital") {
hospitals %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(PPCS = comma(`People Per Hospital`))
} else if (input$map_var == "Median Home Prices"){
realty_data %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(month_date_yyyymm = format(as.Date(paste0(month_date_yyyymm, "01"), format = "%Y%m%d"), "%B %Y")) %>%
select(`month_date_yyyymm`,`median_listing_price`, `median_listing_price_per_square_foot`, `median_listing_price_mm`, `median_listing_price_yy`)
} else if (input$map_var == "Median Days on the Market"){
realty_data %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State)) %>%
mutate(month_date_yyyymm = format(as.Date(paste0(month_date_yyyymm, "01"), format = "%Y%m%d"), "%B %Y")) %>%
select(`month_date_yyyymm`,`median_days_on_market`, `median_days_on_market_mm`, `median_days_on_market_yy`)
}
} else {
NULL
}
})
# Median House Prices Over Time Plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
}else{
NULL
}
})
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
# filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state)
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# Create input for selecting map color
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
