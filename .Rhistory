)
)
),
actionButton("clear_selection_button", "Clear Selection")
),
fluidRow(
column(width = 8,
plotOutput("us_map", click = "plot_click", width = "100%", height = "400px")
),
column(width = 4,
div(
style = "text-align: center;",
conditionalPanel(condition = "input.map_var == 'Median Days on the Market'", plotOutput("median_days_plot", width = "100%", height = "300px")), #  && !is.null(selected_state$state)
conditionalPanel(condition = "input.map_var == 'Median Home Prices'", plotOutput("median_price_plot", width = "100%", height = "300px")),
)
)
),
fluidRow(
plotlyOutput("state_bar_plot", height = "100%", width = "80%")
)
)
)
# Define server
server <- function(input, output, session) {
# reactive expression initializing weighted sum of all features per state data
weighted_sum_data <- reactive({
education_weighted_data <- education_spending_ppcs %>%
mutate(education_weighted = as.integer(PPCS) * input$education_spending_weight) %>%
select(`State`, education_weighted)
hospital_weighted_data <- hospitals %>%
mutate(hospital_weighted = as.integer(`People Per Hospital`) * input$citizens_per_hospital_weight) %>%
select(`State`, hospital_weighted)
median_home_prices_weighted_data <- median_listing_price %>%
mutate(median_home_prices_weighted = as.integer(median_listing_price) * input$median_home_prices_weight) %>%
select(`State`, median_home_prices_weighted)
median_listing_days_weighted_data <- median_listing_days %>%
mutate(median_listing_days_weighted = as.integer(median_days_on_market) * input$median_listing_days_weight) %>%
select(`State`, median_listing_days_weighted)
#View(education_weighted_data)
weighted_sum_data <- education_weighted_data %>%
filter(`State` != "district of columbia") %>%
left_join(hospital_weighted_data, by = "State") %>%
left_join(median_home_prices_weighted_data, by = "State") %>%
left_join(median_listing_days_weighted_data, by = "State")
View(weighted_sum_data)
weighted_sum_data <- weighted_sum_data %>%
mutate(weighted_sum = education_weighted + hospital_weighted + median_home_prices_weighted + median_listing_days_weighted)
View(weighted_sum_data)
normalized_weighted_data <- weighted_sum_data %>%
mutate(total_normalized_weight = (weighted_sum - min(weighted_sum)) / (max(weighted_sum) - min(weighted_sum))) %>%
select(`State`, total_normalized_weight)
View(normalized_weighted_data)
normalized_weighted_data
})
# look up table that maps input values to data sets and column names
data_lookup <- list(
"Education Spending" = list(data = education_spending_ppcs, var = "PPCS", join_data = education_spending_ppcs),
"# Citizens Per Hospital" = list(data = hospitals, var = "People Per Hospital", join_data = hospitals),
"Median Home Prices" = list(data = realty_data, var = "median_listing_price", join_data = median_listing_price),
"Median Days on the Market" = list(data = realty_data, var = "median_days_on_market", join_data = median_listing_days))
# update the data_lookup list
data_lookup[["Weighted Sum"]] <- list(data = NULL, var = "weighted_sum", join_data = weighted_sum_data)
# reactive value to store the selected (clicked) state and its data
selected_state <- reactiveValues(state = NULL, data = NULL)
# observe event sets the selected state to NULL when the variable select input is changed
observeEvent(input$map_var, {
selected_state$state <- NULL
selected_state$data <- NULL
})
# observe event sets the selected state to NULL when the "Clear Selection" button is pressed
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
selected_state$data <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# observe event that sets the  selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
if (!is.null(selected_state$state)) {
data_info <- data_lookup[[input$map_var]]
data_info$join_data %>%
filter(State == selected_state$state) %>%
select(data_info$var) %>%
pull() %>%
as.character() -> selected_state$data
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state), br())
} else {
tags$h4("Please click on a state.")
}
})
# renderPlot context to render the map plot for each select input variable using the look up table
output$us_map <- renderPlot({
if (input$map_var == "Weighted Sum") {
weighted_data <- weighted_sum_data()
join_data <- map_data("state", exact = FALSE) %>%
left_join(weighted_data, by = c("region" = "State")) %>%
mutate(fill_color = total_normalized_weight, region = tolower(region))
create_map_plot(join_data, "fill_color", "Weighted Sum (Normalized)", FALSE)
} else {
data_info <- data_lookup[[input$map_var]]
map_data <- map_data("state", exact = FALSE) %>%
left_join(data_info$join_data, by = c("region" = "State")) %>%
mutate(fill_color = !!sym(data_info$var) / 1e3, region = tolower(region))
if (input$map_var %in% c("Education Spending", "# Citizens Per Hospital", "Median Home Prices")) {
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
} else {
create_map_plot(map_data, "fill_color", "Median Listing Days", TRUE)
}
}
}, bg="transparent")
# renderPlot context to render "Median House Prices Over Time" time series plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
} else {
NULL
}
})
# renderPlotly context to render the state bar plot
output$state_bar_plot <- renderPlotly({
if (input$map_var != "Weighted Sum") {
data_info <- data_lookup[[input$map_var]]
data <- data_info$join_data %>%
select(State, !!sym(data_info$var)) %>%
arrange(desc(!!sym(data_info$var))) %>% # Sort data in descending order
mutate(State = fct_reorder(State, !!sym(data_info$var), .desc = TRUE)) # Reorder states in descending order
create_bar_plot(data, data_info$var, input$map_var)
} else {
NULL
}
})
# renderPlot context to render "Median Days on the Market" seasonal plot
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state)
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# renderUI context for the "Select a variable" selectInput
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market", "Weighted Sum"))
})
# renderText context to display selected state data
output$selected_state_data <- renderText({
if (!is.null(selected_state$data)) {
data_info <- data_lookup[[input$map_var]]
column_name <- data_info$var
pretty_value <- prettyNum(round(as.integer(selected_state$data)), big.mark = ",")
if (column_name == "PPCS") {
pretty_column_name <- column_name
} else {
pretty_column_name <- gsub("_", " ", column_name)
pretty_column_name <- str_to_title(pretty_column_name)
}
paste(pretty_column_name, ": ", pretty_value)
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(cache = FALSE, message = FALSE, warning = FALSE, echo = TRUE, eval = TRUE)
library(tidyverse)
library(shiny)
library(maps)
library(scales)
library(tsibble)
library(dplyr)
library(shinythemes)
#library(DT)
#library(plotly)
# state population data
state_pop_2022 = read_csv("https://uwmadison.box.com/shared/static/z4zms2iesc8rr6lov8x3p74or2q7syyp.csv") %>%
mutate(`Population` = `Population`*1e6)
# number of hospitals/state
hospitals <- read_csv("https://uwmadison.box.com/shared/static/pywujigfcjq83ka272igh6j1kn03ssqv.csv") %>%
mutate(State = str_remove(State, "^\\w+\\s+-\\s+")) %>% # remove "abbrev -" from State col
left_join(state_pop_2022) %>%  # join state population data set
mutate(`People Per Hospital` = `Population` / `Number Hospitals`) %>% # create new people per hospital col
mutate(State = tolower(State)) %>%  # make the state name lower case
drop_na() %>%  #remove missing values
select(`State`, `People Per Hospital`, `Number Hospitals`, `Staffed Beds`, `Total Discharges`) # change ordering
hospitals_scaled <- data.frame(hospitals)
hospitals_scaled <- hospitals_scaled[, -1]
scaled_hospitals <- apply(hospitals_scaled, 2, function(x) (x-min(x))/(max(x)-min(x))*100)
hospitals_scaled <- cbind(hospitals$State, scaled_hospitals)
names(hospitals_scaled) <- c("State", paste0(names(hospitals_scaled)[-1], "_scaled"))
hospitals_scaled <- data.frame(hospitals_scaled)
# head(hospitals)
# education PPCS per state
education_spending_ppcs <- read_csv("https://uwmadison.box.com/shared/static/abtigdtpzkckdh4ivcx5vftck9uyov30.csv") %>%
rename(State = `Geographic area`) %>%
select(`State`, `PPCS`) %>%
drop_na() %>%
mutate(State = gsub("\\.", "", State)) %>%
mutate(State = tolower(State))
# head(education_spending_ppcs)
education_scaled <- data.frame(education_spending_ppcs)
education_scaled <- data.frame(education_scaled[, -1])
scaled_education <- apply(education_scaled, 2, function(x) (x-min(x))/(max(x)-min(x))*100)
education_scaled <- cbind(education_spending_ppcs$State, scaled_education)
names(education_scaled) <- c("State", paste0(names(education_scaled)[-1], "_scaled"))
education_scaled <- data.frame(education_scaled)
# Realtor.com per state data set
realty_data <- read_csv("https://uwmadison.box.com/shared/static/r9kw6nyro7n0p3dr40q0zn7g3eyaw490.csv")
realty_data <- realty_data %>%
mutate(month = as.Date(paste0(realty_data$month, "01"), format = "%Y%m%d")) %>%
mutate(date = as.Date(paste0(realty_data$month_date_yyyymm, "01"), format = "%Y%m%d")) %>% # new
mutate(year = format(realty_data$date, "%Y")) %>% # new
mutate(format(realty_data$date, "%Y")) %>%
rename(State= state) %>%
mutate(State = tolower(State))
median_listing_price <- realty_data %>%
filter(month_date_yyyymm == 202301) %>%
select(State, median_listing_price)
# median_listing_price
median_listing_days <- realty_data %>%
filter(month_date_yyyymm == 202301) %>%
select(State, median_days_on_market)
# median_listing_days
scaled_median_listing_price <- (median_listing_price$median_listing_price - min(median_listing_price$median_listing_price))/(max(median_listing_price$median_listing_price) - min(median_listing_price$median_listing_price)) * 100
median_listing_price$median_listing_price_scaled <- scaled_median_listing_price
scaled_median_listing_days <- (median_listing_days$median_days_on_market - min(median_listing_days$median_days_on_market))/(max(median_listing_days$median_days_on_market) - min(median_listing_days$median_days_on_market)) * 100
median_listing_days$median_days_on_market_scaled <- scaled_median_listing_days
# Function for creating map plot
create_map_plot <- function(map_data, fill_var, title, low_is_good) {
print(map_data)
par(mar = c(0, 0, 0, 0))
ggplot(data=map_data, aes(x = long, y = lat, group = group, fill = !!sym(fill_var))) +
geom_polygon(color = "black") +
scale_fill_gradientn(
colors = if (low_is_good) c("#2C7BB6", "#ABD9E9", "#FFFFBF", "#FDAE61", "#D7191C")
else c("#D7191C", "#FDAE61", "#FFFFBF", "#ABD9E9", "#2C7BB6"),
guide = guide_colorbar(
title = title,
ticks = FALSE,
barwidth = 3,
title.theme = element_text(color = "white")
)
) +
coord_map() +
theme_void() +
theme(panel.background = element_rect(fill = "#272B30", colour = NA),
plot.background = element_rect(fill = "#272B30", colour = NA),
legend.text = element_text(color = "white")
)
}
create_median_price_plot <- function(data){
data = data %>%
filter(is.finite(median_listing_price))
ggplot(data, aes(x = date, y = median_listing_price, group = State, color = State)) +
geom_line() +
scale_y_continuous(breaks = seq(0, max(data$median_listing_price) + 5e4, by = 5e4)) +
labs(title = "Median Home Prices Over Time by State",
x = "Year",
y = "Median Home Price")+
theme(legend.position = "none")
}
create_median_days_plot <- function(data){
ggplot(data, aes(x = month, y = median_days_on_market)) +
geom_line() +
scale_x_date(breaks = "1 year", date_labels = "%Y%M") +
facet_wrap(~State) +
labs(x = "Year", y = "median_days_on_market") +
ggtitle("Seasonal Plot of Median Days on the Market")+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
}
# Define UI
ui <- navbarPage(
theme = shinytheme("slate"),
"Badger Real Estate Group Investment Dashboard",
tabPanel(
"Main",
mainPanel(
p("This interactive visualization allows you to analyze key factors and assist you to make informed, low-risk investments. To start, click a variable of interest from the dropdown menu. The plot below maps your variable of interest on a US map, and if you click on a state the value the state's color is encoding will be presented. The median house prices and median days on the market will also display supplemental plots to the right."
),
uiOutput("selected_state_header"), # Display selected state in header
textOutput("selected_state_data"), # Display selected state data
br(),
uiOutput("map_var_input"),
# conditional weighted sum sliders
conditionalPanel(
condition = "input.map_var == 'Weighted Sum'",
fluidRow(
column(
width = 12,
div(style = "display:inline-block; width:22%; margin-right:2%",
sliderInput("education_spending_weight", "Education Spending Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
),
div(style = "display:inline-block; width:22%; margin-right:2%",
sliderInput("citizens_per_hospital_weight", "# Citizens Per Hospital Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
),
div(style = "display:inline-block; width:22%; margin-right:2%",
sliderInput("median_home_prices_weight", "Median Home Prices Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
),
div(style = "display:inline-block; width:22%;",
sliderInput("median_listing_days_weight", "Median Listing Days Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
)
)
)
),
actionButton("clear_selection_button", "Clear Selection")
),
fluidRow(
column(width = 8,
plotOutput("us_map", click = "plot_click", width = "100%", height = "400px")
),
column(width = 4,
div(
style = "text-align: center;",
conditionalPanel(condition = "input.map_var == 'Median Days on the Market'", plotOutput("median_days_plot", width = "100%", height = "300px")),
conditionalPanel(condition = "input.map_var == 'Median Home Prices'", plotOutput("median_price_plot", width = "100%", height = "300px"))
)
)
)
)
)
# Define server
server <- function(input, output, session) {
# look up table that maps input values to data sets and column names
data_lookup <- list(
"Education Spending" = list(data = education_spending_ppcs, var = "PPCS", join_data = education_spending_ppcs),
"# Citizens Per Hospital" = list(data = hospitals, var = "People Per Hospital", join_data = hospitals),
"Median Home Prices" = list(data = realty_data, var = "median_listing_price", join_data = median_listing_price),
"Median Days on the Market" = list(data = realty_data, var = "median_days_on_market", join_data = median_listing_days)
)
# reactive expression initializing weighted sum of all features per state data
weighted_sum_data <- reactive({
education_weighted_data <- education_spending_ppcs %>%
mutate(education_weighted = as.integer(PPCS) * input$education_spending_weight) %>%
select(`State`, education_weighted)
hospital_weighted_data <- hospitals %>%
mutate(hospital_weighted = as.integer(`People Per Hospital`) * input$citizens_per_hospital_weight) %>%
select(`State`, hospital_weighted)
median_home_prices_weighted_data <- median_listing_price %>%
mutate(median_home_prices_weighted = as.integer(median_listing_price) * input$median_home_prices_weight) %>%
select(`State`, median_home_prices_weighted)
median_listing_days_weighted_data <- median_listing_days %>%
mutate(median_listing_days_weighted = as.integer(median_days_on_market) * input$median_listing_days_weight) %>%
select(`State`, median_listing_days_weighted)
#View(education_weighted_data)
weighted_sum_data <- education_weighted_data %>%
filter(`State` != "district of columbia") %>%
left_join(hospital_weighted_data, by = "State") %>%
left_join(median_home_prices_weighted_data, by = "State") %>%
left_join(median_listing_days_weighted_data, by = "State")
View(weighted_sum_data)
weighted_sum_data <- weighted_sum_data %>%
mutate(weighted_sum = education_weighted + hospital_weighted + median_home_prices_weighted + median_listing_days_weighted)
View(weighted_sum_data)
normalized_weighted_data <- weighted_sum_data %>%
mutate(total_normalized_weight = (weighted_sum - min(weighted_sum)) / (max(weighted_sum) - min(weighted_sum))) %>%
select(`State`, total_normalized_weight)
View(normalized_weighted_data)
normalized_weighted_data
})
# update the data_lookup list
data_lookup[["Weighted Sum"]] <- list(data = NULL, var = "weighted_sum", join_data = weighted_sum_data)
# reactive value to store the selected (clicked) state and its data
selected_state <- reactiveValues(state = NULL, data = NULL)
# observe event sets the selected state to NULL when the variable select input is changed
observeEvent(input$map_var, {
selected_state$state <- NULL
selected_state$data <- NULL
})
# observe event sets the selected state to NULL when the "Clear Selection" button is pressed
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
selected_state$data <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# observe event that sets the  selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
if (!is.null(selected_state$state)) {
data_info <- data_lookup[[input$map_var]]
data_info$join_data %>%
filter(State == selected_state$state) %>%
select(data_info$var) %>%
pull() %>%
as.character() -> selected_state$data
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state), br())
} else {
tags$h4("Please click on a state.")
}
})
# renderPlot context to render the map plot for each select input variable using the look up table
output$us_map <- renderPlot({
if (input$map_var == "Weighted Sum") {
weighted_data <- weighted_sum_data()
join_data <- map_data("state", exact = FALSE) %>%
left_join(weighted_data, by = c("region" = "State")) %>%
mutate(fill_color = total_normalized_weight, region = tolower(region))
create_map_plot(join_data, "fill_color", "Weighted Sum (Normalized)", FALSE)
} else {
data_info <- data_lookup[[input$map_var]]
map_data <- map_data("state", exact = FALSE) %>%
left_join(data_info$join_data, by = c("region" = "State")) %>%
mutate(fill_color = !!sym(data_info$var) / 1e3, region = tolower(region))
if (input$map_var %in% c("Education Spending", "# Citizens Per Hospital", "Median Home Prices")) {
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
} else {
create_map_plot(map_data, "fill_color", "Median Listing Days", TRUE)
}
}
},bg="transparent")
# renderPlot context to render "Median House Prices Over Time" time series plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
} else {
NULL
}
})
# renderPlot context to render "Median Days on the Market" seasonal plot
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state)
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# renderUI context for the "Select a variable" selectInput
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market", "Weighted Sum"))
})
# renderText context to display selected state data
output$selected_state_data <- renderText({
if (!is.null(selected_state$data)) {
data_info <- data_lookup[[input$map_var]]
column_name <- data_info$var
pretty_value <- prettyNum(round(as.integer(selected_state$data)), big.mark = ",")
if (column_name == "PPCS") {
pretty_column_name <- column_name
} else {
pretty_column_name <- gsub("_", " ", column_name)
pretty_column_name <- str_to_title(pretty_column_name)
}
paste(pretty_column_name, ": ", pretty_value)
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
median_listing_price
education_scaled
# head(hospitals)
hospitals_scaled
hospitals_scaled
# state population data
state_pop_2022 = read_csv("https://uwmadison.box.com/shared/static/z4zms2iesc8rr6lov8x3p74or2q7syyp.csv") %>%
mutate(`Population` = `Population`*1e6)
# number of hospitals/state
hospitals <- read_csv("https://uwmadison.box.com/shared/static/pywujigfcjq83ka272igh6j1kn03ssqv.csv") %>%
mutate(State = str_remove(State, "^\\w+\\s+-\\s+")) %>% # remove "abbrev -" from State col
left_join(state_pop_2022) %>%  # join state population data set
mutate(`People Per Hospital` = `Population` / `Number Hospitals`) %>% # create new people per hospital col
mutate(State = tolower(State)) %>%  # make the state name lower case
drop_na() %>%  #remove missing values
select(`State`, `People Per Hospital`, `Number Hospitals`, `Staffed Beds`, `Total Discharges`) # change ordering
hospitals_scaled <- data.frame(hospitals)
hospitals_scaled <- hospitals_scaled[, -1]
scaled_hospitals <- apply(hospitals_scaled, 2, function(x) (x-min(x))/(max(x)-min(x))*100)
hospitals_scaled <- cbind(hospitals$State, scaled_hospitals)
names(hospitals_scaled) <- c("State", paste0(names(hospitals_scaled)[-1], "_scaled"))
hospitals_scaled <- data.frame(hospitals_scaled)
# head(hospitals)
hospitals_scaled
