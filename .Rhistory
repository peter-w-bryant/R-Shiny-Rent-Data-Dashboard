column(width = 4,
div(
style = "text-align: center;",
conditionalPanel(condition = "input.map_var == 'Median Days on the Market'", plotOutput("median_days_plot", width = "100%", height = "300px")),
conditionalPanel(condition = "input.map_var == 'Median Home Prices'", plotOutput("median_price_plot", width = "100%", height = "300px"))
)
)
)
)
)
# Define server
server <- function(input, output, session) {
# look up table that maps input values to data sets and column names
data_lookup <- list(
"Education Spending" = list(data = education_spending_ppcs, var = "PPCS", join_data = education_spending_ppcs),
"# Citizens Per Hospital" = list(data = hospitals, var = "People Per Hospital", join_data = hospitals),
"Median Home Prices" = list(data = realty_data, var = "median_listing_price", join_data = median_listing_price),
"Median Days on the Market" = list(data = realty_data, var = "median_days_on_market", join_data = median_listing_days)
)
# reactive value to store the selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# observe event sets the selected state to NULL when the variable select input is changed
observeEvent(input$map_var, {
selected_state$state <- NULL
})
# observe event sets the selected state to NULL when the "Clear Selection" button is pressed
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# observe event that sets the  selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
})
# reactive expression that grabs the variable data from the look up table according to the value of the selected state
selected_data <- reactive({
if (!is.null(selected_state$state)) {
data_info <- data_lookup[[input$map_var]]
data_info$join_data %>%
filter(State == selected_state$state) %>%
select(data_info$var)
} else {
NULL
}
})
# corresponding observe event that watches for a selected state and renders a pop-up dialog with the variable data for the selected state
observe({
if (!is.null(selected_state$state) && !is.null(selected_data())) {
showModal(modalDialog(
title = paste(input$map_var, "for", str_to_title(selected_state$state)),
paste(selected_data()[[1]]),
easyClose = TRUE
))
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state))
} else {
tags$h4("Please click on a state.")
}
})
# renderPlot context to render the map plot for each select input variable using the look up table
output$us_map <- renderPlot({
data_info <- data_lookup[[input$map_var]]
map_data <- map_data("state", exact = FALSE) %>%
left_join(data_info$join_data, by = c("region" = "State")) %>%
mutate(fill_color = !!sym(data_info$var) / 1e3, region = tolower(region))
if (input$map_var %in% c("Education Spending", "# Citizens Per Hospital", "Median Home Prices")) {
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
} else {
create_map_plot(map_data, "fill_color", "Median Listing Days", TRUE)
}
})
# renderPlot context to render "Median House Prices Over Time" time series plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
} else {
NULL
}
})
# renderPlot context to render "Median Days on the Market" seasonal plot
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state)
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# renderUI context for the "Select a variable" selectInput
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- navbarPage(
theme = shinytheme("slate"),
"Badger Real Estate Group Investment Dashboard",
tabPanel(
"Main",
mainPanel(
p("This interactive visualization allows you to analyze key factors and assist you to make informed, low-risk investments. To start, click a variable of interest from the dropdown menu. The plot on the right maps your variable of interest on a US map, and if you click on a state a table will be displayed below. The median house prices and median days on the market will also display time series plots to the right."
),
uiOutput("selected_state_header"), # Display selected state in header
uiOutput("map_var_input"),
actionButton("clear_selection_button", "Clear Selection")
),
fluidRow(
column(width = 8,
plotOutput("us_map", click = "plot_click", width = "100%", height = "750px")
),
column(width = 4,
offset = 2, # Center the column
div(
style = "text-align: center;",
conditionalPanel(condition = "input.map_var == 'Median Days on the Market'", plotOutput("median_days_plot", width = "100%", height = "300px")),
conditionalPanel(condition = "input.map_var == 'Median Home Prices'", plotOutput("median_price_plot", width = "100%", height = "300px"))
)
)
)
)
)
# Define server
server <- function(input, output, session) {
# look up table that maps input values to data sets and column names
data_lookup <- list(
"Education Spending" = list(data = education_spending_ppcs, var = "PPCS", join_data = education_spending_ppcs),
"# Citizens Per Hospital" = list(data = hospitals, var = "People Per Hospital", join_data = hospitals),
"Median Home Prices" = list(data = realty_data, var = "median_listing_price", join_data = median_listing_price),
"Median Days on the Market" = list(data = realty_data, var = "median_days_on_market", join_data = median_listing_days)
)
# reactive value to store the selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# observe event sets the selected state to NULL when the variable select input is changed
observeEvent(input$map_var, {
selected_state$state <- NULL
})
# observe event sets the selected state to NULL when the "Clear Selection" button is pressed
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# observe event that sets the  selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
})
# reactive expression that grabs the variable data from the look up table according to the value of the selected state
selected_data <- reactive({
if (!is.null(selected_state$state)) {
data_info <- data_lookup[[input$map_var]]
data_info$join_data %>%
filter(State == selected_state$state) %>%
select(data_info$var)
} else {
NULL
}
})
# corresponding observe event that watches for a selected state and renders a pop-up dialog with the variable data for the selected state
observe({
if (!is.null(selected_state$state) && !is.null(selected_data())) {
showModal(modalDialog(
title = paste(input$map_var, "for", str_to_title(selected_state$state)),
paste(selected_data()[[1]]),
easyClose = TRUE
))
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state))
} else {
tags$h4("Please click on a state.")
}
})
# renderPlot context to render the map plot for each select input variable using the look up table
output$us_map <- renderPlot({
data_info <- data_lookup[[input$map_var]]
map_data <- map_data("state", exact = FALSE) %>%
left_join(data_info$join_data, by = c("region" = "State")) %>%
mutate(fill_color = !!sym(data_info$var) / 1e3, region = tolower(region))
if (input$map_var %in% c("Education Spending", "# Citizens Per Hospital", "Median Home Prices")) {
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
} else {
create_map_plot(map_data, "fill_color", "Median Listing Days", TRUE)
}
})
# renderPlot context to render "Median House Prices Over Time" time series plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
} else {
NULL
}
})
# renderPlot context to render "Median Days on the Market" seasonal plot
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state)
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# renderUI context for the "Select a variable" selectInput
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- navbarPage(
theme = shinytheme("slate"),
"Badger Real Estate Group Investment Dashboard",
tabPanel(
"Main",
mainPanel(
p("This interactive visualization allows you to analyze key factors and assist you to make informed, low-risk investments. To start, click a variable of interest from the dropdown menu. The plot on the right maps your variable of interest on a US map, and if you click on a state a table will be displayed below. The median house prices and median days on the market will also display time series plots to the right."
),
uiOutput("selected_state_header"), # Display selected state in header
uiOutput("map_var_input"),
actionButton("clear_selection_button", "Clear Selection")
),
fluidRow(
column(width = 8,
plotOutput("us_map", click = "plot_click", width = "100%", height = "750px")
),
column(width = 4,
div(
style = "text-align: center;",
conditionalPanel(condition = "input.map_var == 'Median Days on the Market'", plotOutput("median_days_plot", width = "100%", height = "300px")),
conditionalPanel(condition = "input.map_var == 'Median Home Prices'", plotOutput("median_price_plot", width = "100%", height = "300px"))
)
)
)
)
)
# Define server
server <- function(input, output, session) {
# look up table that maps input values to data sets and column names
data_lookup <- list(
"Education Spending" = list(data = education_spending_ppcs, var = "PPCS", join_data = education_spending_ppcs),
"# Citizens Per Hospital" = list(data = hospitals, var = "People Per Hospital", join_data = hospitals),
"Median Home Prices" = list(data = realty_data, var = "median_listing_price", join_data = median_listing_price),
"Median Days on the Market" = list(data = realty_data, var = "median_days_on_market", join_data = median_listing_days)
)
# reactive value to store the selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# observe event sets the selected state to NULL when the variable select input is changed
observeEvent(input$map_var, {
selected_state$state <- NULL
})
# observe event sets the selected state to NULL when the "Clear Selection" button is pressed
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# observe event that sets the  selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
})
# reactive expression that grabs the variable data from the look up table according to the value of the selected state
selected_data <- reactive({
if (!is.null(selected_state$state)) {
data_info <- data_lookup[[input$map_var]]
data_info$join_data %>%
filter(State == selected_state$state) %>%
select(data_info$var)
} else {
NULL
}
})
# corresponding observe event that watches for a selected state and renders a pop-up dialog with the variable data for the selected state
observe({
if (!is.null(selected_state$state) && !is.null(selected_data())) {
showModal(modalDialog(
title = paste(input$map_var, "for", str_to_title(selected_state$state)),
paste(selected_data()[[1]]),
easyClose = TRUE
))
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state))
} else {
tags$h4("Please click on a state.")
}
})
# renderPlot context to render the map plot for each select input variable using the look up table
output$us_map <- renderPlot({
data_info <- data_lookup[[input$map_var]]
map_data <- map_data("state", exact = FALSE) %>%
left_join(data_info$join_data, by = c("region" = "State")) %>%
mutate(fill_color = !!sym(data_info$var) / 1e3, region = tolower(region))
if (input$map_var %in% c("Education Spending", "# Citizens Per Hospital", "Median Home Prices")) {
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
} else {
create_map_plot(map_data, "fill_color", "Median Listing Days", TRUE)
}
})
# renderPlot context to render "Median House Prices Over Time" time series plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
} else {
NULL
}
})
# renderPlot context to render "Median Days on the Market" seasonal plot
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state)
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# renderUI context for the "Select a variable" selectInput
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- navbarPage(
theme = shinytheme("slate"),
"Badger Real Estate Group Investment Dashboard",
tabPanel(
"Main",
mainPanel(
p("This interactive visualization allows you to analyze key factors and assist you to make informed, low-risk investments. To start, click a variable of interest from the dropdown menu. The plot below maps your variable of interest on a US map, and if you click on a state the value the state's color is encoding will be presented. The median house prices and median days on the market will also display supplemental plots to the right."
),
uiOutput("selected_state_header"), # Display selected state in header
uiOutput("map_var_input"),
actionButton("clear_selection_button", "Clear Selection")
),
fluidRow(
column(width = 8,
plotOutput("us_map", click = "plot_click", width = "100%", height = "750px")
),
column(width = 4,
div(
style = "text-align: center;",
conditionalPanel(condition = "input.map_var == 'Median Days on the Market'", plotOutput("median_days_plot", width = "100%", height = "300px")),
conditionalPanel(condition = "input.map_var == 'Median Home Prices'", plotOutput("median_price_plot", width = "100%", height = "300px"))
)
)
)
)
)
# Define server
server <- function(input, output, session) {
# look up table that maps input values to data sets and column names
data_lookup <- list(
"Education Spending" = list(data = education_spending_ppcs, var = "PPCS", join_data = education_spending_ppcs),
"# Citizens Per Hospital" = list(data = hospitals, var = "People Per Hospital", join_data = hospitals),
"Median Home Prices" = list(data = realty_data, var = "median_listing_price", join_data = median_listing_price),
"Median Days on the Market" = list(data = realty_data, var = "median_days_on_market", join_data = median_listing_days)
)
# reactive value to store the selected (clicked) state
selected_state <- reactiveValues(state = NULL)
# observe event sets the selected state to NULL when the variable select input is changed
observeEvent(input$map_var, {
selected_state$state <- NULL
})
# observe event sets the selected state to NULL when the "Clear Selection" button is pressed
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# observe event that sets the  selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
})
# reactive expression that grabs the variable data from the look up table according to the value of the selected state
selected_data <- reactive({
if (!is.null(selected_state$state)) {
data_info <- data_lookup[[input$map_var]]
data_info$join_data %>%
filter(State == selected_state$state) %>%
select(data_info$var)
} else {
NULL
}
})
# corresponding observe event that watches for a selected state and renders a pop-up dialog with the variable data for the selected state
observe({
if (!is.null(selected_state$state) && !is.null(selected_data())) {
showModal(modalDialog(
title = paste(input$map_var, "for", str_to_title(selected_state$state)),
paste(selected_data()[[1]]),
easyClose = TRUE
))
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state))
} else {
tags$h4("Please click on a state.")
}
})
# renderPlot context to render the map plot for each select input variable using the look up table
output$us_map <- renderPlot({
data_info <- data_lookup[[input$map_var]]
map_data <- map_data("state", exact = FALSE) %>%
left_join(data_info$join_data, by = c("region" = "State")) %>%
mutate(fill_color = !!sym(data_info$var) / 1e3, region = tolower(region))
if (input$map_var %in% c("Education Spending", "# Citizens Per Hospital", "Median Home Prices")) {
create_map_plot(map_data, "fill_color", "Total (thousands)", TRUE)
} else {
create_map_plot(map_data, "fill_color", "Median Listing Days", TRUE)
}
})
# renderPlot context to render "Median House Prices Over Time" time series plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
} else {
NULL
}
})
# renderPlot context to render "Median Days on the Market" seasonal plot
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state)
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# renderUI context for the "Select a variable" selectInput
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market"))
})
}
# Run the app
shinyApp(ui = ui, server = server)
