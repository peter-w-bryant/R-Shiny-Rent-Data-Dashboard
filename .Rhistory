merged_sf <- left_join(us_counties, california_geojson, by = c("STATE_NAME" = "STATE_NAME", "COUNTY_NAME" = "COUNTY_NAME"))
merged_sf <- st_join(us_counties, california_geojson, by = c("STATE_NAME" = "STATE_NAME", "COUNTY_NAME" = "COUNTY_NAME"))
us_counties_df <- as.data.frame(us_counties)
california_geojson_df <- as.data.frame(california_geojson_df)
california_geojson_df <- as.data.frame(california_geojson)
merged_sf <- left_join(us_counties_df, california_geojson_df, by = c("STATE_NAME" = "STATE_NAME", "COUNTY_NAME" = "COUNTY_NAME"))
# Convert back to a data frame
merged_df <- st_as_sf(merged_sf)
merged_df
new_records_sf <- anti_join(california_geojson_df, us_counties_df, by = c("STATE_NAME" = "state", "COUNTY_NAME" = "county"))
us_counties = us_counties %>%
rename(STATE_NAME = NAME) %>%
select(-LSAD, -CENSUSAREA) %>%
rename(OBJECTID = GEO_ID) %>%
filter(STATE_NAME != "Hawaii" & STATE_NAME != "Alaska" & STATE_NAME != "Puerto Rico") %>%
st_as_sf()
# Create data frame of ID, STATE NAME pairs
us_states_state_id_mapping = read_sf("us_states.json") %>%
st_drop_geometry() %>%
as.data.frame() %>%
select(STATE, NAME) %>%
filter(NAME != "Hawaii" & NAME != "Alaska" & NAME != "Puerto Rico")
# Add the name of each state to each county record
us_counties = read_sf("us_counties.json") %>%
as.data.frame() %>%
rename(COUNTY_NAME = NAME) %>%
left_join(us_states_state_id_mapping, by="STATE")
####
# Clean us counties geojson
us_counties = us_counties %>%
rename(STATE_NAME = NAME) %>%
select(-LSAD, -CENSUSAREA) %>%
rename(OBJECTID = GEO_ID) %>%
filter(STATE_NAME != "Hawaii" & STATE_NAME != "Alaska" & STATE_NAME != "Puerto Rico") %>%
st_as_sf()
# Read in California geojson
california_geojson <- st_read("https://uwmadison.box.com/shared/static/iz2vor3rma5rzacvul5vbyfekbcnmcty.geojson") %>%
dplyr::select(-AdminRegion, -FireMAR, -LawMAR, -State_FIPS_ID, -County_FIPS_ID, -Shape__Area, -Shape__Length) %>%
rename(COUNTY_NAME = CountyName) %>%
mutate(STATE_NAME = "California")
# Convert us_counties to an sf object
us_counties_sf <- st_as_sf(us_counties_df, coords = c("longitude", "latitude"), crs = 4326)
us_counties_df <- bind_rows(us_counties_df, california_geojson_df)
us_counties_df <- as.data.frame(us_counties)
california_geojson_df <- as.data.frame(california_geojson)
us_counties_df
california_geojson_df
us_counties_df <- as.data.frame(us_counties)
california_geojson_df <- as.data.frame(california_geojson)
# Find the unique rows in california_geojson_df that are not in us_counties_df
unique_california_rows <- anti_join(california_geojson_df, us_counties_df, by = c("STATE_NAME", "COUNTY_NAME"))
# Merge the unique rows from california_geojson_df with us_counties_df
combined_df <- bind_rows(us_counties_df, unique_california_rows)
unique_california_rows <- anti_join(california_geojson_df, us_counties_df, by = c("STATE_NAME", "COUNTY_NAME"))
# Make sure OBJECTID is of the same data type in both data frames
us_counties_df$OBJECTID <- as.character(us_counties_df$OBJECTID)
unique_california_rows$OBJECTID <- as.character(unique_california_rows$OBJECTID)
# Merge the unique rows from california_geojson_df with us_counties_df
combined_df <- bind_rows(us_counties_df, unique_california_rows)
combined_df
us_counties <- bind_rows(us_counties_df, unique_california_rows) %>%
st_as_sf()
us_counties_df
us_counties %>%
filter(STATE_NAME == "California")
all_rental_data_2021 %>%
filter(STATE_NAME == "California")
all_rental_data_2021 %>%
filter(STATE_NAME == "California")
unique_california_rows
unique_california_rows
california_geojson_df
us_counties_df
california_geojson_df
us_counties_df
# Make sure OBJECTID is of the same data type in both data frames
us_counties_df$OBJECTID <- as.character(us_counties_df$OBJECTID)
unique_california_rows
unique_rows
unique_rows <- setdiff(california_geojson_df, us_counties_df, by = c("STATE_NAME", "COUNTY_NAME"))
knitr::opts_chunk$set(cache = FALSE, message = FALSE, warning = FALSE, echo = TRUE, eval = TRUE)
source('plots.R')
library(tidyverse)
library(shiny)
library(maps)
library(scales)
library(tsibble)
library(dplyr)
library(shinythemes)
library(plotly)
library(leaflet)
library(sf)
library(DT)
# Create data frame of ID, STATE NAME pairs from: https://eric.clst.org/tech/usgeojson/ -> U.S. States geojson
us_states_state_id_mapping = read_sf("https://uwmadison.box.com/shared/static/vnih15dvap3ic7c1ddqdbouhazjruqhp.json") %>%
st_drop_geometry() %>%
as.data.frame() %>%
select(STATE, NAME) %>%
filter(NAME != "Hawaii" & NAME != "Alaska" & NAME != "Puerto Rico")
# Join the state name on each county ID
us_counties = read_sf("https://uwmadison.box.com/shared/static/qis14d5xz0s9q8jvyqrlxmzdh5k8wzl9.json") %>%
as.data.frame() %>%
rename(COUNTY_NAME = NAME) %>%
left_join(us_states_state_id_mapping, by="STATE")
# Preprocess/Clean U.S. counties geojson
# us_counties DF columns:
# OBJECTID (chr), STATE (chr), COUNTY (chr), COUNTY_NAME (chr), STATE_NAME (chr), geometry (sfc_MULTIPOLYGON)
us_counties = us_counties %>%
rename(STATE_NAME = NAME) %>%
select(-LSAD, -CENSUSAREA) %>%
rename(OBJECTID = GEO_ID) %>%
filter(STATE_NAME != "Hawaii" & STATE_NAME != "Alaska" & STATE_NAME != "Puerto Rico") %>%
st_as_sf()
# Read in csv file of all (COUNTY, STATE) rental data: scraped with Python Selenium script from rentdata.org
# Script located here: <paste box link to script>
# all_rental_data DF columns:
# STATE_NAME (chr), Year (num), COUNTY_NAME (chr), 0BR (num), 1BR (num), 2BR (num), 3BR (num), 4BR (num)
all_rental_data <- read_csv("https://uwmadison.box.com/shared/static/143sr11feqgi5pqahlv9pn00ku7swsna.csv") %>%
mutate_at(vars(`0BR`: `4BR`), as.numeric) %>%
rename(COUNTY_NAME = County,
STATE_NAME = State)
# Save U.S. County Data in sf format to DF
us_counties_df <- as.data.frame(us_counties)
# us_counties_all is a DF object with columns:
# STATE_NAME (chr), COUNTY_NAME (chr), OBJECTID (chr), STATE (chr), COUNTY (chr), geometry (sfc_MULTIPOLYGON),
# Year (num), 0BR (num), 1BR (num), 2BR (num), 3BR (num), 4BR (num)
us_counties_all <- merge(us_counties_df, all_rental_data,
by.x = c("STATE_NAME", "COUNTY_NAME"),
by.y = c("STATE_NAME", "COUNTY_NAME"))
# Create a DF of only rental data for 2021, used for County Analysis interactive Leaflet plot
us_counties_2021 <- us_counties_all %>%
filter(Year == 2021)
# Save 2021 U.S. County Rental Data as sf
us_counties_2021_geojson <- st_as_sf(us_counties_2021)
# Create a DF of mainland U.S. States (not DC) for the "Select a state" selectInput
available_states <- us_states_state_id_mapping %>%
arrange(NAME) %>%
filter(NAME != "District of Columbia") %>%
select(NAME) %>%
rename(`Available States` = NAME)
# Function to compute normalized column vector (max value = 100, min value = 1)
normalize <- function(vec) { return((vec-min(vec))/(max(vec)-min(vec))*100) }
# State population data
state_pop_2022 = read_csv("https://uwmadison.box.com/shared/static/z4zms2iesc8rr6lov8x3p74or2q7syyp.csv") %>%
mutate(`Population` = `Population`*1e6)
# Number of hospitals/state
hospitals <- read_csv("https://uwmadison.box.com/shared/static/pywujigfcjq83ka272igh6j1kn03ssqv.csv") %>%
mutate(State = str_remove(State, "^\\w+\\s+-\\s+")) %>% # remove "abbrev -" from State col
left_join(state_pop_2022) %>%                           # join state population data set
mutate(`People Per Hospital` = `Population` / `Number Hospitals`) %>% # create new people per hospital col
mutate(State = tolower(State)) %>%  # make the state name lower case
drop_na() %>%                       #remove missing values
select(`State`, `People Per Hospital`) %>% # change ordering
filter(`State` != "hawaii" & `State` != "alaska") %>%
mutate(scaled_count = normalize(`People Per Hospital`))
# education PPCS per state
education_spending_ppcs <- read_csv("https://uwmadison.box.com/shared/static/abtigdtpzkckdh4ivcx5vftck9uyov30.csv") %>%
rename(State = `Geographic area`) %>%
select(`State`, `PPCS`) %>%
drop_na() %>%
mutate(State = gsub("\\.", "", State)) %>%
mutate(State = tolower(State)) %>%
filter(`State` != "hawaii" & `State` != "alaska") %>%
mutate(scaled_ppc = normalize(PPCS))
# Realtor.com per state data set
realty_data <- read_csv("https://uwmadison.box.com/shared/static/r9kw6nyro7n0p3dr40q0zn7g3eyaw490.csv")
# Preprocess realty data
realty_data <- realty_data %>%
mutate(month = as.Date(paste0(realty_data$month, "01"), format = "%Y%m%d")) %>%
mutate(date = as.Date(paste0(realty_data$month_date_yyyymm, "01"), format = "%Y%m%d")) %>% # new
mutate(year = format(realty_data$date, "%Y")) %>% # new
mutate(format(realty_data$date, "%Y")) %>%
rename(State= state) %>%
mutate(State = tolower(State)) %>%
filter(`State` != "hawaii" & `State` != "alaska")
# Initialize DF with State median listing price in Jan 2023
median_listing_price <- realty_data %>%
filter(month_date_yyyymm == 202301) %>%
select(State, median_listing_price) %>%
mutate(median_listing_price_scaled = normalize(median_listing_price))
# Initialize DF with State median days on the market in Jan 2023
median_listing_days <- realty_data %>%
filter(month_date_yyyymm == 202301) %>%
select(State, median_days_on_market) %>%
mutate(median_days_on_market_scaled = normalize(median_days_on_market) * -1)
# Function to compute normalized weighted sum of all input features. Ta
compute_weighted_sum <- function(education_spending_weight, citizens_per_hospital_weight, median_home_prices_weight, median_listing_days_weight){
education_weighted_data <- education_spending_ppcs %>%
mutate(education_weighted = as.numeric(scaled_ppc) * education_spending_weight) %>%
select(`State`, education_weighted)
hospital_weighted_data <- hospitals %>%
mutate(hospital_weighted = as.numeric(scaled_count) * citizens_per_hospital_weight) %>%
select(`State`, hospital_weighted)
median_home_prices_weighted_data <- median_listing_price %>%
mutate(median_home_prices_weighted = as.numeric(median_listing_price_scaled) * median_home_prices_weight) %>%
select(`State`, median_home_prices_weighted)
median_listing_days_weighted_data <- median_listing_days %>%
mutate(median_listing_days_weighted = as.numeric(median_days_on_market_scaled) * median_listing_days_weight) %>%
select(`State`, median_listing_days_weighted)
weighted_sum_data <- education_weighted_data %>%
filter(`State` != "district of columbia") %>%
left_join(hospital_weighted_data, by = "State") %>%
left_join(median_home_prices_weighted_data, by = "State") %>%
left_join(median_listing_days_weighted_data, by = "State")
weighted_sum_data <- weighted_sum_data %>%
mutate(weighted_sum = education_weighted + hospital_weighted + median_home_prices_weighted + median_listing_days_weighted)
normalized_weighted_data <- weighted_sum_data %>%
mutate(total_normalized_weight = (weighted_sum - min(weighted_sum)) / (max(weighted_sum) - min(weighted_sum))) %>%
select(`State`, total_normalized_weight)
return(normalized_weighted_data)
}
# Page Paragraphs
us_analysis_pg = "This interactive visualization allows you to analyze key factors and assist you to make informed, low-risk investments. To start, click a variable of interest from the dropdown menu. The plot below maps your variable of interest on a US map, and if you click on a state the value the state's color is encoding will be presented. The median house prices and median days on the market will also display supplemental plots to the right."
county_analysis_pg = "This interactive visualization allows you to analyze key factors and assist you to make informed, low-risk investments. To start, click a variable of interest from the dropdown menu. The plot below maps your variable of interest on a US map, and if you click on a state the value the state's color is encoding will be presented. The median house prices and median days on the market will also display supplemental plots to the right."
source('plots.R')
ui <- navbarPage(
theme = shinytheme("slate"),
title = "BREG",
# U.S. Analysis (Main Visualization) Tab+Page
tabPanel(
"State Analysis",
mainPanel(
tags$h2("Badger Real Estate Group",
tags$span("Investment Dashboard", style = "color: #BF050C; font-weight: bold;")
),
p(us_analysis_pg),
uiOutput("selected_state_header"), # Display selected state in header
textOutput("selected_state_data"), # Display selected state data
br(),
uiOutput("map_var_input"),
# conditional weighted sum sliders
conditionalPanel(
condition = "input.map_var == 'Weighted Sum'",
fluidRow(
column(
width = 12,
div(style = "display:inline-block; width:22%; margin-right:2%",
sliderInput("education_spending_weight", "Education Spending Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
),
div(style = "display:inline-block; width:22%; margin-right:2%",
sliderInput("citizens_per_hospital_weight", "# Citizens Per Hospital Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
),
div(style = "display:inline-block; width:22%; margin-right:2%",
sliderInput("median_home_prices_weight", "Median Home Prices Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
),
div(style = "display:inline-block; width:22%;",
sliderInput("median_listing_days_weight", "Median Listing Days Weight:", min = 0, max = 1, step = 0.01, value = 0.25)
)
)
)
),
textOutput("description"),
br(),
actionButton("clear_selection_button", "Clear Selection")
),
fluidRow(
column(width = 8,
plotOutput("us_map", click = "plot_click", width = "100%", height = "550px")
),
column(width = 4,
div(
style = "text-align: center;",
conditionalPanel(condition = "input.map_var == 'Median Days on the Market' && $('#selected_state_header').text() !== 'Please click on a state.'", plotOutput("median_days_plot", width = "100%", height = "300px")), #  && !is.null(selected_state$state)
conditionalPanel(condition = "input.map_var == 'Median Home Prices'", plotOutput("median_price_plot", width = "100%", height = "300px")),
)
)
),
fluidRow(
plotlyOutput("state_bar_plot", height = "1000px", width = "90%")
)
),
# California Analysis Tab+Page
tabPanel(
"County Analysis",
mainPanel(
tags$h2("U.S. County",
tags$span("Rental Property Analysis", style = "color: #BF050C; font-weight: bold;")
),
p(county_analysis_pg),
uiOutput("selected_state_county_header"),
fluidRow(
column(
width = 3,
selectInput("bedrooms", "Select number of bedrooms:",
choices = c("0BR", "1BR", "2BR", "3BR", "4BR"),
selected = "1BR")
),
column(
width = 3,
selectInput("state_optional_select", "Select a state (Optional):",
choices = c("All", available_states),
selected = "All")
)
),
fluidRow(
splitLayout(cellWidths = c(1000,600), leafletOutput("us_county_map", width="1000px", height = "700px"),
conditionalPanel(condition = "$('#selected_state_county_header').text() !== 'Showing All U.S. Counties'", plotlyOutput("bedrooms_line_plot", width = "100%", height = "700px"))),
),
),
),
# Link to Code + Links to Data
tabPanel(
"About",
mainPanel(
includeHTML("about.html")
)
)
)
server <- function(input, output, session) {
# U.S. ANALYSIS
# reactive expression initializing weighted sum of all features per state data
weighted_sum_data <- reactive({ compute_weighted_sum(input$education_spending_weight, input$citizens_per_hospital_weight, input$median_home_prices_weight, input$median_listing_days_weight)})
# look up table that maps input values to data sets and column names
data_lookup <- list(
"Education Spending" = list(data = education_spending_ppcs, var = "PPCS", join_data = education_spending_ppcs, legend = "PPCS (Thousands)"),
"# Citizens Per Hospital" = list(data = hospitals, var = "People Per Hospital", join_data = hospitals, legend = "# of Citizens (Thousands)"),
"Median Home Prices" = list(data = realty_data, var = "median_listing_price", join_data = median_listing_price, legend = "Median Home Prices (Thousands)"),
"Median Days on the Market" = list(data = realty_data, var = "median_days_on_market", join_data = median_listing_days, legend = "Median Days on the Market"))
# update the data_lookup list
data_lookup[["Weighted Sum"]] <- list(data = NULL, var = "weighted_sum", join_data = weighted_sum_data)
# reactive value to store the selected (clicked) state and its data
selected_state <- reactiveValues(state = NULL, data = NULL)
# observe event sets the selected state to NULL when the variable select input is changed
observeEvent(input$map_var, {
selected_state$state <- NULL
selected_state$data <- NULL
})
# observe event sets the selected state to NULL when the "Clear Selection" button is pressed
observeEvent(input$clear_selection_button, {
selected_state$state <- NULL
selected_state$data <- NULL
updateSelectInput(session, "plot_click", selected = NULL)
})
# observe event that sets the  selected state when user clicks on map by x and y coordinates
observeEvent(input$plot_click, {
click_loc <- input$plot_click
state_name <- map.where("state", click_loc$x, click_loc$y)
state_name <- gsub(":.*", "", state_name) # remove any characters after and including ":"
selected_state$state <- state_name
if (!is.null(selected_state$state)) {
data_info <- data_lookup[[input$map_var]]
if(input$map_var != "Weighted Sum"){
data_info$join_data %>%
filter(State == selected_state$state) %>%
select(data_info$var) %>%
pull() %>%
as.character() -> selected_state$data
} else {
weighted_sum_data() %>%
filter(State == selected_state$state) %>%
select(`total_normalized_weight`) %>%
pull() %>%
as.character() -> selected_state$data
}
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_header <- renderUI({
if (!is.null(selected_state$state)) {
tags$h3("Selected State: ",str_to_title(selected_state$state), br())
} else {
tags$h4("Please click on a state.")
}
})
# renderPlot context to render the map plot for each select input variable using the look up table
output$us_map <- renderPlot({
if (input$map_var == "Weighted Sum") {
weighted_data <- weighted_sum_data()
join_data <- map_data("state", exact = FALSE) %>%
left_join(weighted_data, by = c("region" = "State")) %>%
mutate(fill_color = total_normalized_weight, region = tolower(region))
create_map_plot(join_data, "fill_color", "Weighted Sum (Normalized)", TRUE)
} else {
data_info <- data_lookup[[input$map_var]]
map_data <- map_data("state", exact = FALSE) %>%
left_join(data_info$join_data, by = c("region" = "State"))
if (input$map_var %in% c("Education Spending", "# Citizens Per Hospital", "Median Home Prices")) {
map_data = map_data %>% mutate(fill_color = !!sym(data_info$var) / 1e3, region = tolower(region))
create_map_plot(map_data, "fill_color", data_info$legend, TRUE)
} else {
map_data = map_data %>% mutate(fill_color = !!sym(data_info$var), region = tolower(region))
create_map_plot(map_data, "fill_color", data_info$legend, TRUE)
}
}
}, bg="transparent")
# renderPlot context to render "Median House Prices Over Time" time series plot
output$median_price_plot <- renderPlot({
if (input$map_var == "Median Home Prices") {
if (is.null(selected_state$state)) {
filtered_data <- realty_data
} else {
filtered_data <- realty_data %>%
filter(State == selected_state$state)
}
create_median_price_plot(filtered_data)
} else {
NULL
}
})
# renderPlotly context to render the state bar plot
output$state_bar_plot <- renderPlotly({
if (input$map_var != "Weighted Sum") {
data_info <- data_lookup[[input$map_var]]
data <- data_info$join_data %>%
select(State, !!sym(data_info$var)) %>%
arrange(desc(!!sym(data_info$var))) %>% # Sort data in descending order
mutate(State = fct_reorder(State, !!sym(data_info$var), .desc = TRUE)) %>%  # Reorder states in descending order
mutate(State = str_to_title(State))
create_bar_plot(data, data_info$var, input$map_var)
} else {
data <- weighted_sum_data() %>%
select(State, total_normalized_weight) %>%
arrange(desc(total_normalized_weight)) %>%
mutate(State = factor(State, levels = unique(State))) %>%
mutate(State = str_to_title(State))
create_bar_plot(data, "total_normalized_weight", input$map_var)
}
})
# renderPlot context to render "Median Days on the Market" seasonal plot
output$median_days_plot <- renderPlot({
if (input$map_var == "Median Days on the Market") {
if (!is.null(selected_state$state)) {
filtered_data <- realty_data %>%
group_by(State) %>%
filter(State == selected_state$state) %>%
mutate(State = str_to_title(State))
filtered_data$month <- as.Date(paste0(filtered_data$month_date_yyyymm, "01"), format = "%Y%m%d")
create_median_days_plot(filtered_data)
} else {
NULL
}
}else{
NULL
}
})
# renderUI context for the "Select a variable" selectInput
output$map_var_input <- renderUI({
selectInput("map_var", "Select a variable:", choices = c("Education Spending", "# Citizens Per Hospital", "Median Home Prices", "Median Days on the Market", "Weighted Sum"))
})
# renderText context to display selected state data
output$selected_state_data <- renderText({
if (!is.null(selected_state$data)) {
data_info <- data_lookup[[input$map_var]]
column_name <- data_info$var
if (input$map_var == "Weighted Sum") {pretty_value <- prettyNum(round(as.numeric(selected_state$data), 2), big.mark = ",")}
else {pretty_value <- prettyNum(round(as.integer(selected_state$data)), big.mark = ",")}
if (column_name == "PPCS") {
pretty_column_name <- column_name
} else {
pretty_column_name <- gsub("_", " ", column_name)
pretty_column_name <- str_to_title(pretty_column_name)
}
paste(pretty_column_name, ": ", pretty_value, "*")
}
})
output$description <- renderText({
if (input$map_var == "Median Home Prices") {
"*The median listing price within the specified geography during the specified month."
} else if (input$map_var == "Median Days on the Market") {
"*The median number of days property listings spend on the market within the specified geography during the specified month. Time spent on the market is defined as the time between the initial listing of a property and either its closing date or the date it is taken off the market."
} else if (input$map_var == "Weighted Sum") {
"*The weighted sum of Education Spending, # Citizens Per Hospital, Median Home Prices, and Median Days on the Market, where the weights can be adjusted using the sliders."
}else if(input$map_var == "Education Spending"){
"*The total expenditure on education by state governments within the specified geography during the specified time period."
}else if(input$map_var == "# Citizens Per Hospital"){
"*The average number of citizens per hospital in the specified state."
}
})
# U.S. County ANALYSIS
output$us_county_map <- renderLeaflet({state_leaflet_plot(input$bedrooms, input$state_optional_select)})
selected_county <- reactiveVal()
observeEvent(input$us_county_map_shape_click, {click_data <- input$us_county_map_shape_click
selected_county(click_data$id)
})
selected_county_info <- reactive({
if (!is.null(selected_county())) {
county_info <- us_counties_2021[us_counties_2021$OBJECTID == selected_county(), c("COUNTY_NAME", "STATE_NAME")]
return(county_info)
}
})
output$county_info <- renderDT({
if (is.null(selected_county())) {
return(NULL)
}
county_data <- us_counties_all[us_counties_all$OBJECTID == selected_county(), ] %>%
dplyr::select(-OBJECTID, -geometry, -STATE, -COUNTY) %>%
arrange(desc(Year)) %>%
select(-STATE_NAME, -COUNTY_NAME)
datatable(county_data, rownames = FALSE)
})
output$bedrooms_line_plot <- renderPlotly({
if (!is.null(selected_county())) {
create_bedrooms_line_plot(selected_county_info(), input$bedrooms)
}
})
# renderUI context to update the selected state in the sidebar panel
output$selected_state_county_header <- renderUI({
if (!is.null(selected_county())) {
tags$h3(paste(selected_county_info()[1], selected_county_info()[2], sep = ", "), br())
} else {
tags$h4("Showing All U.S. Counties")
}
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(cache = FALSE, message = FALSE, warning = FALSE, echo = TRUE, eval = TRUE)
source('plots.R')
library(tidyverse)
library(shiny)
library(maps)
library(scales)
library(tsibble)
